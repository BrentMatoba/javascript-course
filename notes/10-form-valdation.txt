Forms are a crucial part of most websites. Almost every major site  has sign-up forms, contact forms,
search forms, and more! Luckily HTML5 andjavascripthave some handy buil in methods. Youve larady learned about validation
with HTML and styling validations with CSS in our form validations elsson in the intemrediate HTML and css course.


LESSON OVERVIEW:
This section contains a general overview of topics that you will learn in this LESSON
    Understand the importance of validation in HTML forms.
    Understand Constraint Validation API for more control over form validation.
    Add validation using only JavaScript.

Client-Side validation: https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation#validating_forms_using_javascript
Before submitting data to the server, it is important to ensure that all requried form controls are filled out , in the correct format.
This is called client-side form validatoin, and helps ensure data submitted matches the requirements set forth in the varous form controls.

Client-side validation is an initial check and an important feature of good user eperience; by catching invalid data on the client-side, the user can fix it sraight awa.
If it gest to the server and is then rejectred, anoticeable delay is causeed by a round trip to the server and theen back to the client-side to tell the user to fix their data.

However, client side validation shoudl NOT be considered an exhaust secuiryt measure, Your apps should ALWAYS perform security check on any fomr-submitted dat on the server side
AS WELL as the client-sdie, because client-side validation is too easy to bypass, so malicious users can still easily send bata data through to your server.



WHATR IS FORM VALIDTION?
Go to any popular site with a registration fomr, and you will notice that they provide ffedback when
you don't enter your data in the format they are expecting.

This is called FORM VALIDATION. When you enter data, then the browser and/or the web serverwill check
to see that the dat is in the correct format and within the constraints set by the application. GValidation done in the broswer is called client-side valition,
while validation done on the sever is called server side validation in this chapter we are focusing on the licent side vladiation.


If the information is correctly formatted, the application allow sthe data to be submitted to the server and usualy save din a database, if the information isn't corerclry formatted,
, it gives the user an error message explaining what needs to be correctred and lets them try agian.

W wnt to make filling out web forms as easy as possible. So why do we insist on validating our forms? There are three main reasons:
We want to get teh right data, in the righ tofmrat. Our applications won't work porperly if our uses data is stored in teh wrong format is incorrect or isommitedd altoghetr.

We want to protect our uses data. Forcing our users toenter secure passwords makes it easier to protect hteir account information.

WE want to protect ourselves. There are many ways that malicious users can misuse unprotected forms to damage the application.



Different types of client side validation.
There are two different types of client side validation that you'll encounter on the web
    Built in form validation uses HTML form validation features, which we've discussed in many places througought this module.
    This validation doesn't require much javascript. Built in form validation has better perforamnce than javascript, but it is not as customizable as javascript validation.


    Javascript validation is coded using javascript. This validation is completely customizable, but you need to create it all (or use a library.)



Using built in form validaiton:
    One of the most significant features of modern form controls is the ability to validate most user data without relying javascript.
    This is done by  using validation attributes on form elements. WE've seen many of these earlier in this course, but to recap:
        required; specifies whether a form field needs to b filled in before the form can be submitted.
        
        minlenght anda maxlength: specfifies the minimum and maximum lenght of textual data (strings)

        min and max: specifies the minimum and maximum values of numerical input types.

        type: Sepcifies whetehr the data needs to be a number, an email address, or some other specifi preset type.

        pattern: Specifies a regular expression that defines a pattern the entered data needs to follow.

When an element in s invalid, the following things are true;
    The elements matches the :invalid CSS pseudo-class, and some times otehr Using
    pseudo calsses(e.g. out of range)
    depending on the error, which lets you apply a specific style to invalid elements.
    If the user tries to send thed ata, the browser will block the form and display an error message.



The required attribute:
    The simpleset HTML validation feature is the required attribute. To make an input jmandatory, add this attribute to the elemnt. When this attribute i sset, the elemnt matches the :required UI pseudo-class and the fomr oqn't submit, displaying
    an  error message on submission when the input is empty. While empty, the input will also be considered invalid, matching the :invalid UI pseudo-class.



Validating against a regular expression:
Another useful validation feature is the pattenr attribute, which expects ar egular expression as its value. A regular expression (regexp) is a pattern that can be used to match character combinations in text strings,
so regexps are ideal for form validation and serve a variety of other uses in ajvascrip.teh
REgexps are quite complex and we don't intend to teach them exhaustively in this artcile. Below are some examples  to give you a basic oidea of how they work.

a: matches on character is a (not b, not aa, and so on)
abc: matches a, followed by b, followed b yc.
ab?c: Matches a, optionally follwoed by a single b, followed by c (ac or abc)
ab*c: Matches a, optionally folowed bya ny number of b's, folowed by c (ac, abdc, abbbc, and so on)
a|b: Matches on character that is a or b.
abc|xyz: Matches exactly abc or exaclty xyx, but not combeisn



Validating forms using Javascript
you must use javascript if you want to take control over the look  and feel of native error messages. In thsi seciton we will look at thte different ways to do this.

The constraint validation API,
The ocnstaint valdation API consists of a set of methods and properties available on the following form element DOM interfaces:

    HTML ButtonElement (represents a button elmeent.)
    HTML FieldSetElement (represents a fieldset elmeent)
    HTML INput elmeent
    HTML Output element
    HTML SleectElement
    HTMLTextAreaElement

The constraint validation APi makes the following properties available on the above elements:
    ValidationMessage: REturns a localized message describing the validation constraints that the control doens't satisfy.
    If the control is not a candidate for constraint validation or the elements value fsatisfies its constraints this will return an empty string.

    Validation: Returns a ValidityState object that ocntains several properties describing the validity stae of the element. You can find 
    full details of all the available properties int eh validitystate reference page:
    