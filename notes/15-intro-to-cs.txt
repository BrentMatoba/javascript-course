Introduction
You’ve learned how to build some cool stuff already and, frankly, you could probably make some decent websites without a crazy amount of additional formal education. However, just because you can write English at a grade school level doesn’t mean you will be editing the New York Times anytime soon.

In the world of programming, there’s a difference between solving a problem the brute force way and solving a problem WELL. We touched on the first layer of this when we covered basic programming and how you should break apart your code into well-organized chunks.

If you assume those lessons were all about learning how to write good code, these next few lessons are going to be about training yourself to figure out the best code to write – the most elegant solution to the problem at hand. It becomes particularly important whenever you start working with large data sets, like when your website becomes highly successful.

We’re taking a look at some more Computer Science-y concepts here because they are fundamental for a reason. Some problems require you to use tools beyond just arrays and iterators. There’s no sense reinventing the wheel when others have already figured out good methods for solving certain types of problems.

If that doesn’t get you interested, remember that this curriculum is meant to prepare you for life beyond the web page. If you’re interested in applying for a job, you’ll be asked questions that directly touch on some of this stuff. It’s going to require you to put on your thinking cap (sorry, it had to happen sometime), but we won’t be doing anything too crazy. We’ll stick to the practical side of this material as opposed to getting too stuck in theory.

What part do algorithms play in modern web development, specifically, user based web sites?

For your typical website, algorithms are mostly not necessary. You might find hash tables and other caching methods helpful, but usually it doesn't make a huge difference.

Algorithms become important in web development when you have a lot of data that you have to process or when you are performing complicated transformations on that data. For example, consider the Quora search engine. You could probably develop a similar search engine without much algorithms experience. However, once your site gained thousands or millions of users, your search engine would not be able to handle the large bandwidth of requests. There would simply be too many users requesting to search too many documents. And that is when algorithms help you. Algorithms let you figure out efficient ways to handle large amounts of data.

Algorithms also let you handle complicated transformations on data. For example, maybe you want to develop a CAPTCHA. You could generate an image and output wavy letters with basic programming skills. However, if you learn algorithms, you will be better equipped to generate images with blur, ripples, reflection, noise, etc. Or, for instance, consider Google documents. Without algorithms, it would be impossible to create collaborative real-time text editing. The problem is just too large and too complex to bust out a solution in a single coding session. You need to have a process to get you from one state to another. Algorithms help you create solutions to these problems.

What part do algorithms play in modern web development, specifically, user based web sites?

For your typical website, algorithms are mostly not necessary. You might find hash tables and other caching methods helpful, but usually it doesn't make a huge difference.

Algorithms become important in web development when you have a lot of data that you have to process or when you are performing complicated transformations on that data. For example, consider the Quora search engine. You could probably develop a similar search engine without much algorithms experience. However, once your site gained thousands or millions of users, your search engine would not be able to handle the large bandwidth of requests. There would simply be too many users requesting to search too many documents. And that is when algorithms help you. Algorithms let you figure out efficient ways to handle large amounts of data.

Algorithms also let you handle complicated transformations on data. For example, maybe you want to develop a CAPTCHA. You could generate an image and output wavy letters with basic programming skills. However, if you learn algorithms, you will be better equipped to generate images with blur, ripples, reflection, noise, etc. Or, for instance, consider Google documents. Without algorithms, it would be impossible to create collaborative real-time text editing. The problem is just too large and too complex to bust out a solution in a single coding session. You need to have a process to get you from one state to another. Algorithms help you create solutions to these problems.

