Factory Functions and the Module Pattern

Why not constructors?
    Object constructors are only one of many ways to organize your code. While they are common and are a fundamental building
    block of javascript, they have their flaws.

Lesson Overview:
1. Describe the scope of a variable.
2. Explore what closures are.
3. Briefly consider the disadvantages of using constructors
4. Discuss Factory functions with examples
5. Discuss private variables and functions concerning factory functions
6. Showcase object inheritance witht he help of factory functions.
7. Describe what module pattern and IIFE's are
8. Discuss encapsulation and how the module pattern helps with namespacing.



1. Spoonfuls of Scopes
    Scoping essentially asks the question: "What variables are available to me?" it indicates the current context of a variable. When a variable is not declared within any
    functions, it is said to exist within the global scope, meanign that they are available anywhere. If they are within {}, they are said to be locally scoped.
    
    closure: the combination of a function and the surroudning state within which a function was declared in. 
    This surroudnign state, also called its lexical environment, consists of any local variables that were in scope at the time the closure was made.


    1.1 Closures aren't scary
        Closures are just the concept that if you call a funciton within a function, the inner function can access the variables of the outer function. yay!
    
    1.2 So whats wrong with constructors? 
        One of the key arguements against constructors, is that they LOOK like regular Javascript functions, even thought they
        do not behave like regular javascript functions. If you try to use a constructor function without the new keyword, not only does your program fail to work, but
        also produces error messages that are harder to track down and understand.

        Another issue is the way that instanceof works. It checks the prescence of a constructor's prototype in an object's ENTIRE prototype chain, which does nothing
        to confirm if an object was made using that constructor since the constructor's prototype can be reassigned after the creation of an object.

2. Factory Functions.
    Very similar to constructors, but instead levy the power of closures. Instead of using the new keyword to create an object, factory functions simply set up and return
    the new object when you call the function. They do not use the prototype, which incurs a performance penalty. But as a general rule, this performance penalty isn't
    significant unless you're creating thousands of objects. 

    const User = function (name) {
        this.name = name;
        this.discordName = "@" + name;
    }
    // hey, this is a constructor - 
    // then this can be refactored into a factory!

    function createUser (name) {
        const discordName = "@" + name;
        return { name, discordName };
    }
    // and that's very similar, except since it's just a function,
    // we don't need a new keyword
        *this honestly seems very silly but ok
    
3. Object shorthand notation:
    const name = "Bob";
    const age = 28;
    const color = "red";

    const thatObject = { name: name, age: age, color: color };

    If we have a variable with the same name as that of the property to which we are assigning it, we can simply write it once!
    const fancyExample = {name, age, color}

4. Destructuring:
    Unpacking

5.  Private variables and functions. 
        function createUser (name) {
        const discordName = "@" + name;

        let reputation = 0;
        const getReputation = () => reputation;
        const giveReputation = () => reputation++;

        return { name, discordName, getReputation, giveReputation };
        }

        useful with factory functions, since the closures keep variables within private.
        DOESN"T REASLLY EXPLAIN USE CASES


6. Prototypal Inheritance with factories:
        Hypothetical situation: we need to extend the user factory into a player factory that has more metrics
        function createPlayer (name, level) {
            const { discordName, getReputation } = createUser(name);

            const increaseLevel = () => level++;
            return { name, discordName, getReputation, increaseLevel };
            }
        
        its just calling the user factory then adding some more things (like level up!) and sending it on its ways.
        not actually complicated


*Note: Javascript ES6 introduced modules, which are a set of syntax for importing and exporting code between different
javascript files. "While they are important and powerful, they are covered a bit later in the curriculum. 
We are not talking about them in this section."

So this is the things I ACTUALLY NEED nice. 

7. The module pattern - IIFE's.
    The "module pattern" is just using a factory function to group together code instead of spawning objects.
    This is achieved by wrapping your factory function in  parenthesis and the immediately invoking it. Resulting
    in the name of Immediately Invoked Function Expression, or IIFE. Wrapping a factory function inside an IIFE is called the module pattern.

        const calculator = (function () {
        const add = (a, b) => a + b;
        const sub = (a, b) => a - b;
        const mul = (a, b) => a * b;
        const div = (a, b) => a / b;
        return { add, sub, mul, div };
        })();

        calculator.add(3,5); // 8
        calculator.sub(6,2); // 4
        calculator.mul(14,5534); // 77476

    The main function of grouping the code like this is encapsulation!!!. Doesn't have anythinng to do with memory effeciency or whatnot.


Article: Closures
 https://wesbos.com/javascript/03-the-tricky-bits/closures

 Closure:The ability to access a parent level scope from a child scope, even after the parent function has been terminated.
    This is usually used to hold on to pieces of data after the function has ended. Very useful in asynchronous programming as the timing of everything doesn'T
    necessarily sync up. The advantage of Closures over storing info in broader scope variables is that it maintains encapsulation/private variables, and that 
    the closure will be cleaned up by garbage collector sooner than the varible, resulting in more memory effecient code.

    function outer(){
        function inner(){
            const innerVar = "Hey I am the inner variable"
        }
        console.log()
    }

Article; Constructors are Bad for Javascript:
https://tsherif.wordpress.com/2013/08/04/constructors-are-bad-for-javascript/
    Ok frankly this is a little over my head and it comes across as two guys arguing over things that don't matter for 99% of people.
    THe essence of the article is that constructors == bad, and were implemented in javascript because that was the convention of the time
    and there were no real alternatives. Prototypal inheritance and factory functions are viewed as a complete alternative method that should serve as Javascripts
    primary form of inheritance. To be HONEST I dont' care lol

Article: Module pattern in Javascript:
https://dev.to/tomekbuszewski/module-pattern-in-javascript-56jm

    A module is a construct somewhat similar to a singleton class(?) It has only one instance aned exposes its members,
    but it doesn't have any kind of internal state.

    a.Defining a module:
    A module is created as an Immediately Invoked Function Expression (IIFE) with a function inside.
    const SomeModule = (function() {});

    Everything within the body of said funciton is bound tot aht module and can be seen by each other. Modules emulate public and private methods
    by creating mentioned earlier scope and exposing only those things that are declared. 
        Private methods or functions are members of given entity that can be seen only within said entity.
        Public ones can be accessed from the outside of given entity.

    Acessing a module is actulaly accessing whatever it returns.

    b. Exposing a module:
        make a function exposed by returning the function.
        const Formatter = (function() {
            const log = (message) => console.log(`[${Date.now()}] Logger: ${message}`);

            const makeUppercase = (text) => {
                log("Making uppercase");
                return text.toUpperCase();
            };  

            return {
                makeUppercase,
            }
        })();

        *Modules can house not only functions, but arrays, objects, and primitives as well.


    c. Declaring Module dependencies:
        Treat modules as closed entities. Meaning, they reside within themselves and nothing more is needed for htem to exist.
        But sometimes, you want to work with, for example, DOM or window global object.

            TO achieve that, the module may have dependencies. 


Article: Building From the Inside Out
    Separating view from Data using Connect Four.
    Thesis: Inexperienced Programmers tend to fall into the Anti-pattern of interacting with the
    DOM too freely with their game logic.

    Modern Applications are built in various ways depending on scale, scope, requirements, technological restrictions, etc.
    This article is NOT intended to teach about application design. Nor to provide a one-size-fits-all methodology to building
    any web app. Its intent is to teach good practices for separating state logic from the UI controls within the context of vanilla JS.

    1. Imagine the outside.
        Pretend that building an application is like building a dream house. Imagine what that dream house looks like in its final form.
        Imagine decorations, the windows, the door, the front yard etc. But what about the structural elements? These are far more important
        to the integrity of the house than any of the aesthetic choices. Behind each exterior element, there is an interior support structure.
        In the same way, our application's user interface should be a visual representation of underlying application logic. In other words,
        behind everything that looks and feels nice, there should be a visual representation of underlyihgn application logic.
        In other words, behind everything that makes our game LOOK and FEEL nice, there should be solid, foundational code.

    2. Build from the inside.
        Its easy to focus on the visual and interactable elements of a project, just like its easy to imagine how a house will look from the outside
        when we dream of building one. But just like a builder would first consider the structural design and blueprints before beginning to imagine
        walls, doors, and windows, we should begin to think how our application is going to function at its core before implementing details about
        the surface.

        Its never the duty of drywall to frame or support the house, nor by itself, create a strong barrier between rooms. In the same way, our DOM elements
        and queries should not be responsibel for storing or handling the implementation details of how our application works. That is not their responsibility.
        they shouldnt' be concerned with storing details on the state of our game, nor handling the logic our game requires to function correctly. 
        Instead, the DOM should be responsible for READING and DISPLAYING the application state to the user and providing an easy-to-use gateway to interact with
        the methods it needs to.

        For example, if I am making a game, my UI should have access to a method it needs to use in order to play a round. This method
        should be simple to call and as restrictive as possible (meaning it should NOT need to provide a multitude of arguments to do something).
        Conversely, the DOM probably doesn't need access to a way of changing which layer's turn it is. Instead, it should be able to READ whose
        turn it is. as it changes after every round. This is an important distinction.

