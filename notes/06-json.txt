JSON (Javascript object notation) is a staandardized format for structuring data. It is heavily absed on the syntax for javascript objects.
You will often encounter JSON formatted data when working with external servers or APIs.
It is essentially the universal format for transmitting data on the web.

Fortunately there isn't much to learn here. We're only including a lesson on it because some formatting rules can cause confusion if you aren't aware of them.


Javascript Object notation (JSON) is a standard text-based format for represetning structured data based on javascript object syntax. It is commonly used for transmitting data in web applications.
(e.g. sending some data form the server tot he client, so it can be displayed on a web page, or vice versa) You'll come across it quite often, so int his article,
we give you all you need tow ork with JSON using javascript, including parsing JSON so you can access data within it, and creating JSON.

No really, what is JSON?
    JSON is a text-based data format following javascript object syntax, which was popularized by douglas crockford. Even though it closely resembels
    javascript object literal sytnax, it can be used independently fomr javascript, and many programming environments feature the ability to read  (prse)
    and generate JSON.

    JSON exists as a string, useful when youw ant to transmit data accross a netowrk. It needs to be converted to a native javascript objec twhen you want to access the data. This is not a big issue. Javascript provides a global JSON objec tthat has methods available for converting between the two. 

JSON Structure:
    As descirbed above, json is a string whose format very much resembles javascript objet literal format. You can include the same basic data types inside JSON as you can in a standard javascript object
    strings, numbers, array, booleans, and other object literals. Thi sallows you to construct a data hierarchy, like so:

    {
  "squadName": "Super hero squad",
  "homeTown": "Metro City",
  "formed": 2016,
  "secretBase": "Super tower",
  "active": true,
  "members": [
    {
      "name": "Molecule Man",
      "age": 29,
      "secretIdentity": "Dan Jukes",
      "powers": ["Radiation resistance", "Turning tiny", "Radiation blast"]
    },
    {
      "name": "Madame Uppercut",
      "age": 39,
      "secretIdentity": "Jane Wilson",
      "powers": [
        "Million tonne punch",
        "Damage resistance",
        "Superhuman reflexes"
      ]
    },
    {
      "name": "Eternal Flame",
      "age": 1000000,
      "secretIdentity": "Unknown",
      "powers": [
        "Immortality",
        "Heat Immunity",
        "Inferno",
        "Teleportation",
        "Interdimensional travel"
      ]
    }
  ]
}




IF we loaded this tring into a javascript program and parsed it into a variable caleld superHEROES for example, we could then access the data
inside  it using the same dot/bracket notation we looked at in the javascript object basics article. For example:

superHeroes.homeTown:
superHeroes["active"];

To accesss data further down the hierarchy, you ahve to chain the required property names and array indexes together. For example, to acces teh third superpower of the second hero listed in the memebrns list, you'd do this.



JSON.parse()
A common use of JSON is to exchange data to/from a webserver.
When receiving data from a web server, the data is always a string.
Parse the data with JSON. parse(), and the data becomes a javascript object.

Example: PARSING JSON:
  Imagine we received this text from a web server:
  '{"name":"John", "age":30, "city":"New York"}'

Use the javascript function JSON.parse() to convert text into a javascript object:
const obj = JSON.parse('{"name":"John", "age":30, "city":"New York"}');



Array as JSON:
  When using the JSON.parse() on a JSON derived from an array, the method will return a javascript array, instead ofa javascript obejct.