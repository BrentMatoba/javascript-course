Introduction:
By this poitn you will hav elearned and had a chance to practice the most common object-creation and organization patterns in ajvascript. But this si jstu the TIP of the iceberg.
More important than learning the syntax for factory functions or modules is figuring out how to use them effectively.

This whole series of lessons ahs been about the "
object oriented prgoramming paradigm (OP) The basics of creating objects adnc lasses are relatively straightforward, but iti s not stgraightforward to decide what top ut in each object, or whet o make a new object, or when to let an object inhertit from another one.

Lesson Overview:
    This section contains a general overview of topics that you will learn in this lesson.
        Explain the single responsibiltiy principle
        Briefly explain the additional solid principles
        eXplain waht tightly coupled objects are and why we want to avoid them.

    Luckily there are several concepts and principles that can guide us int making good decisions when it comes to our object. This lesson is an introduciton toht emost importnat of those concepts.
    Keep in mind there is not usually a very clear answer to your application design questions. Some patterns and ideas are obviously better htan others, but there is oftens ome trade-off when deciidng wher top ut as pecific fuciton.
    these principles are not rules, they're helpful guidelines


Single Responsibility:
    As you craft your obejcts, one of the most important things to remember ist he single responsibility principle which states taht a class (or object or module) should only ahve ONE responsibility. This doesn't meant hat an object can only do one thing,
    but it does mean that everything an object does should be part of one responsibility.

    Here's a really common example. Most of our code has funcitons to update write things to the dom in addition to ouur aplication logic. its a REALLY good idea to separate your dom stuff form the applciation logic.


    The second issue remaining ist hat the isGFameOVer funtion should only be responsible for checking if the gameOver condtiion is met. based on isGameOver return value, th function taht handles the game lopo shoud be repsonsible fgor deciding whether to call DOMstuff.gameOver(This.winner) or not.
    Another way to think about single repsonsibilty is that a given method/class/component shoud have a single reasont o change. Otherwise, if an object ist rying to have multiple responsibilties, changing one aspect might affect another.

    The single responsibilty principle is the first of a commonly found set of five design principles called the SOLID principles. you wwill read ;more about these priniciples in the assignment articles below.

Loosely coupled Objects:
    Obviously, all of our objects are intended to work together to form our final aplication. You should take care, however, to make sure that yoru individual objects can stgand alone as much as possible. Tightly coupled objects are objects taht rely so heavily on each otehr that removing or changing one willm
    mean that you ahve to complet ely change another one - a real bumme.re
    
    This one is related pretty strongly to "single responsibitly" but takes a different angle. As ane xapmle, if we were writing a game and wante4d to completely chagne how the user interface worked, we should be ablet o do that without copmletel reworking the game loc. So we should be able tos tart off writing our game using primarily console.logs()s an then add in a bunch of dom funcitons later without touching the game logic.



SOLID principle #1:
Single Responsibility
The single responsibility principle says that a class or module shoudl ahve only a single purpouse. For example, if you ahve a walle tclass, that class should only implement
wallet funcitonality. Its fine to call other funcitonalit, butit shoudln't be written there.

Bad Example:
class Car {
    constructor(make, model) {
        this.make = make;
        this.model = model;
    }

    start() {
        if (...) { // Logic to determine whether or not the car should start
            this.errorLog(`The car ${this.make} ${this.model} started.`);
            return true;
        }
        this.errorLog(`The car ${this.make} ${this.model} failed to start.`);
        return false;
    }

    errorLog(message) {
        console.log(message);
    }
}


This violates the single responsibility principle, ebcause the logic for loggin ght einformation should not be a repsonsibility of the car class.
There are a number of readibility and code management isuses that are caused by this, but the easiest issue to describe is actually refactoring.
Letes say your logger logs to a file, adn this works great for several motnhs. Suddenly , an update occurs on the unerlying system that the car class is runing on, and you need to change thte way you write to files. Suddnely, you now
nee to update every file writing instance of ever class you've ever implemented a logger inside of, that ttask would be huge!


class ErrorLog {
    static log(message) {
        console.log(message);
    }
}

class Car {
    constructor(make, model) {
        this.make = make;
        this.model = model;
    }

    start() {
        if (...) { // Logic to determine whether or not the car should start
            ErrorLog.log(`The car ${this.make} ${this.model} started.`);
            return true;
        }
        ErrorLog.log(`The car ${this.make} ${this.model} failed to start.`);
        return false;
    }
}

As you can see here, we wouldn't have this problem. The logger is stored in a separate class, which means its functionality is separate to the car class. the car class
can be changed, moved around, and even deleted wiothout affecting the logger class. LIkewise, if a change is requried to the loger class, it only needs to be carried out in a single place.



#2: Open-closed:
    The open clased principle says taht code should be open for extension, but clsoed for modification. What this means is that if we want to add additoina funcitonality, we should be able to do so simply by extending the 
    original fucnitonality, we should be able to do so simply by extending the original funcitonality, without the need to modify it.

    
class Vehicle {
    constructor(fuelCapacity, fuelEfficiency) {
        this.fuelCapacity = fuelCapacity;
        this.fuelEfficiency = fuelEfficiency;
    }

    getRange() {
        return this.fuelCapacity * this.fuelEfficiency;
    }
}

const standardVehicle = new Vehicle(10, 15);

console.log(standardVehicle.getRange()); // Outputs '150'









class Vehicle {
    constructor(fuelCapacity, fuelEfficiency) {
        this.fuelCapacity = fuelCapacity;
        this.fuelEfficiency = fuelEfficiency;
    }

    getRange() {
        let range = this.fuelCapacity * this.fuelEfficiency;

        if (this instanceof HybridVehicle) {
            range += this.electricRange;
        }
        return range;
    }
}

class HybridVehicle extends Vehicle {
    constructor(fuelCapacity, fuelEfficiency, electricRange) {
        super(fuelCapacity, fuelEfficiency);
        this.electricRange = electricRange;
    }
}

const standardVehicle = new Vehicle(10, 15);
const hybridVehicle = new HybridVehicle(10, 15, 50);

console.log(standardVehicle.getRange()); // Outputs '150'
console.log(hybridVehicle.getRange()); // Outputs '200'

This violates the open-clsoed prnciple, because whiel adding our new hybridveh8icle class we have had to go back and modify the code of our vehicle class in order to make it work. Going forward, every time we add a new typ eof vehicle that might have different parameteres for its range,
we'll ahve to continulaly modify that existing getRange function.



Instead what we could do, is to override the getRange method in the HybridVehicle class, giving the correct output for both vehicle types, without every modifyign the original code:

class Vehicle {
    constructor(fuelCapacity, fuelEfficiency) {
        this.fuelCapacity = fuelCapacity;
        this.fuelEfficiency = fuelEfficiency;
    }

    getRange() {
        return this.fuelCapacity * this.fuelEfficiency;
    }
}

class HybridVehicle extends Vehicle {
    constructor(fuelCapacity, fuelEfficiency, electricRange) {
        super(fuelCapacity, fuelEfficiency);
        this.electricRange = electricRange;
    }

    getRange() {
        return (this.fuelCapacity * this.fuelEfficiency) + this.electricRange;
    }
}

const standardVehicle = new Vehicle(10, 15);
const hybridVehicle = new HybridVehicle(10, 15, 50);

console.log(standardVehicle.getRange()); // Outputs '150'
console.log(hybridVehicle.getRange()); // Outputs '200'


Liskov substitution principle states that any class should be substitutable for its parent class without unexpected consequences. In others words, if the classes cat and dog extend the class animal,
then we would expect all of the functionality held within the animal class to behave normally for a cat and dog object.

A classic example of a liskov substitution violation is the "square and rectangle problem" in this problem, it is posed that square class can inherit from a rectangle class. On the face of it, this makes sense; both shapes have two
sides, and both calculate tgheir area byu multiplying their side sby each other.

class Rectangle {
    constructor(height, width) {
        this.height = height;
        this.width = width;
    }

    setHeight(newHeight) {
        this.height = newHeight;
    }
}

class Square extends Rectangle {}

const rectangle = new Rectangle(4, 5);
const square = new Square(4, 4);

console.log(`Height: ${rectangle.height}, Width: ${rectangle.width}`); // Outputs 'Height: 4, Width: 5' (correct)
console.log(`Height: ${square.height}, Width: ${square.width}`); // Outputs 'Height: 4, Width: 4' (correct)

square.setHeight(5);
console.log(`Height: ${square.height}, Width: ${square.width}`); // Outputs 'Height: 5, Width: 4' (wrong)


In this example, we initialize a rectangle and squrae, and output their dimensions. WE then call the  rectangle.setHeight() on the square object, and output its dimensiosn again.
What we find is that the square now has a differnt height than its lenght, which of course makess for an invalid square.

This can be solved, using polymorphism, an if statement in the rectanglee class, or a veriety of other methods. But the real cause of the issue is that square is not a good child class of rectangle, and that in reality, perhaps both shapes should inherit form a shape class instead.







#4 Interface Segregation
The interface segregation principle states that an entity should never be force to implement an interface that contains elements which it will never use.
For example, a penguin shoudl never be forced to implement a bird interface if that bird interface includes funcitonality relating to fying, as penguins (spoiler alert) cannot fly.

Now this functionality is al ittle more difficult to demonstrate using javascript, due to its lack of interfaces. However, we can demonstrate it by using composition.
Composition is a s ubject all by itself, but i'll give a very high level introduciton: instead of inherting an entire class, w can instead add chunks of functionality to a class. Here's an example that actually addresses the interface segregation principle:


class Penguin {}

class Bird {}

const flyer = {
    fly() {
        console.log(`Flap flap, I'm flying!`);
    },
};

Object.assign(Bird.prototype, flyer);

const bird = new Bird();
bird.fly(); // Outputs 'Flap flap, I'm flying!'

const penguin = new Penguin();
penguin.fly(); // 'Error: penguin.fly is not a function'


What this example does is to add the lfyihng funcitonality (or interface) onyl to the classes that require it. This means that penguins won't be given the baliity to fly, hwereas birds will.

THi sis one method of adhering tot he interface segregation principle, but it is a fairly rough exapmle ( as once again, javascript doens't play well with interfaces)


#5 Dependency Inversion:
    The dependency injetion principle states that high level cdoe should never depend on low level interfaces, and should isntead use abstractions. Its all about decoupilng code.

    Not following? YES

    Lets say we ahve a pieve of fsoftware that runs an online store, adn within that software one of the clases (purchasehanlder) handles the final purchase. This class is capaable of charging the user's credit card, and does so using a PAYPAL api.




class PurchaseHandler {
    processPayment(paymentDetails, amount) {
        // Complicated, PayPal specific logic goes here
        const paymentSuccess = PayPal.requestPayment(paymentDetails, amount);

        if (paymentSuccess) {
            // Do something
            return true;
        }

        // Do something
        return false;
    }
}


The problem here is that if we change from paypal to square (anothe rpayment processor) in 6 motnhs time, this code breaks. We need to go back and swap out our
paypal api calls for square api calls. Bu tin addition, what if the square api wants different types of data? or perhaps it want sus to "stage" a payment first, then to process it once staging has completed?

Thats bad, and so we need to asbtract the funcitonality out intead.

Rather than directly call the PayPal API form our payment page, we'll isntead create nother class called payment handler. The interface for htis class wil remain the statementno matter what underlying payment system we use, even i the two systems
are completey differen.t We'll st ill need to make changes to the payment handler interface if we change payment processor, but our higher level interface remains unchanged.


class PurchaseHandler {
    processPayment(paymentDetails, amount) {
        const paymentSuccess = PaymentHandler.requestPayment(
            paymentDetails,
            amount
        );

        if (paymentSuccess) {
            // Do something
            return true;
        }

        // Do something
        return false;
    }
}

class PaymentHandler {
    requestPayment(paymentDetails, amount) {
        // Complicated, PayPal specific logic goes here
        return PayPal.requestPayment(paymentDetails, amount);
    }
}


Now you may be looking at this and thinking "but wait, that's WAY more code" and you'd be right. Like many oft he SOLID principles and indeed OOP principles in general, th eobject is less about writing less code or writing it quicker, and more about writing BETTER code. The above change will save yoiu days
or maybe even weeks further down the line, i nexchagne for spending a few hours on it now.






https://web.archive.org/web/20200810210808/https://medium.com/@alexcastrounis/how-to-write-highly-scalable-and-maintainable-javascript-coupling-c860787dbdd4

How to write highly scalable and maintainable javascript: coupling
Introduction:
    In the previous chapter of this series, we discussed modular javascript. we looked at native pattersna dn some of the prominent modular specifications and formats such as AMD, CommonJS, etc.

    In this final chpater, we'll examine ways to reduce coupling between javascript modules.


Coupling:
    Coupling between modules occurs when on emodule directly refrences another module. in other words, one more "knows" about anothe rmodule.

    For this chapter, assume that we are building a web application that allwos people to place food leivery orfder. Each time the user places an order, the app creates the order and sends a confrimation to the user
    that includes the estimated time of delivery. The user can check the status, or cancel the order at any time.

    One modular approach to implement this is to create a module that handles orders anotehr that handles delivers. The ordering module may have functions to create, read, update, and delte ordres (I.E. CRUD) while the deliers module may have functions
    to estimate delivery time, being delivery, complete delivery, and so on.

    Lets look at an example implementation. Note that the code in this post is ritten primarily for clarity


    // Order module definition
var orderModule = (function() {
    var module = {},
        deliveries = myApp.deliveryModule;

    module.createOrder = function(orderData) {
        var orderResult;

        orderResult = // Code to actually create the order
        orderResult.estimatedDeliveryTime =    deliveries.getDeliveryTime(orderData);

        return orderResult;
    };

    return module;
})();


Thr order and delivery modules shown are tightly coupled. For the order module to get the estimated delivery time, it has to "know" about the 
deliveyr module, and call the appropriate module's API.

There are many reasons to avoid tightly coupling your modules. We dicussed some of these in tehf irst chapter of this series. Recall that one of the goal hwen creating highly scalable and maintainable javascirpt applications
is taht any module can be easily swapped out t any time for aq different module> Reusability is also a major reason to mnimize coupling.
Ideally, we would like to maximize code reuse and the ability to test modules independently..

Anohter goal was there should not be a single point of failure anywhere ni the applicaiton. Suppose that something wen t wrong in our call to get the estimated ddelivery time, this may break the entire application, or at least the successful completion of the ordering process.
WE should prefer that the ordre is still placed and the application continues to operate, even if we are temporarily  unable to provide a delivery time estimate to the customer.

Patterns to reduce Coupling
    Tightly copuled modules have a variety of disadvantages as noted. Luckily there are ways we can reduce coupling, which includes manyp atterns used to achieve loose coupling between modules. These patterns are often a variation of the so-called observer pattern. One such variation is referred to as the pub/sub or publish/subscribe pattern.

    In some cases, the observer registeres itself iwt h thte evvent emitter direclty in order ot be notified whenever a certain event occurs. The downside to this approach ist hat an observer "knows" about the event emitter objct and what observables or events to observee through the registration process.


    We can do better. There are many versions of the pub/sub pattern that invovlve a mediator object, which help[s to further minniize coupling between modules. A meditationr object is an
    objectg that isolates the publisher from the subscirber.]

    Addy osmani made an excellent analogy when he related the mediator to a flight control tower in airplane communciations.
    Airplanes never communicated didrectly with each other. Airplanes instead only provide information to and receive information from the tower, and
    therefore do not "know" about one anothe rwithout information from the tower.
    