Introduction:
By this poitn you will hav elearned and had a chance to practice the most common object-creation and organization patterns in ajvascript. But this si jstu the TIP of the iceberg.
More important than learning the syntax for factory functions or modules is figuring out how to use them effectively.

This whole series of lessons ahs been about the "
object oriented prgoramming paradigm (OP) The basics of creating objects adnc lasses are relatively straightforward, but iti s not stgraightforward to decide what top ut in each object, or whet o make a new object, or when to let an object inhertit from another one.

Lesson Overview:
    This section contains a general overview of topics that you will learn in this lesson.
        Explain the single responsibiltiy principle
        Briefly explain the additional solid principles
        eXplain waht tightly coupled objects are and why we want to avoid them.

    Luckily there are several concepts and principles that can guide us int making good decisions when it comes to our object. This lesson is an introduciton toht emost importnat of those concepts.
    Keep in mind there is not usually a very clear answer to your application design questions. Some patterns and ideas are obviously better htan others, but there is oftens ome trade-off when deciidng wher top ut as pecific fuciton.
    these principles are not rules, they're helpful guidelines


Single Responsibility:
    As you craft your obejcts, one of the most important things to remember ist he single responsibility principle which states taht a class (or object or module) should only ahve ONE responsibility. This doesn't meant hat an object can only do one thing,
    but it does mean that everything an object does should be part of one responsibility.

    Here's a really common example. Most of our code has funcitons to update write things to the dom in addition to ouur aplication logic. its a REALLY good idea to separate your dom stuff form the applciation logic.


    The second issue remaining ist hat the isGFameOVer funtion should only be responsible for checking if the gameOver condtiion is met. based on isGameOver return value, th function taht handles the game lopo shoud be repsonsible fgor deciding whether to call DOMstuff.gameOver(This.winner) or not.
    Another way to think about single repsonsibilty is that a given method/class/component shoud have a single reasont o change. Otherwise, if an object ist rying to have multiple responsibilties, changing one aspect might affect another.

    The single responsibilty principle is the first of a commonly found set of five design principles called the SOLID principles. you wwill read ;more about these priniciples in the assignment articles below.

Loosely coupled Objects:
    Obviously, all of our objects are intended to work together to form our final aplication. You should take care, however, to make sure that yoru individual objects can stgand alone as much as possible. Tightly coupled objects are objects taht rely so heavily on each otehr that removing or changing one willm
    mean that you ahve to complet ely change another one - a real bumme.re
    
    This one is related pretty strongly to "single responsibitly" but takes a different angle. As ane xapmle, if we were writing a game and wante4d to completely chagne how the user interface worked, we should be ablet o do that without copmletel reworking the game loc. So we should be able tos tart off writing our game using primarily console.logs()s an then add in a bunch of dom funcitons later without touching the game logic.