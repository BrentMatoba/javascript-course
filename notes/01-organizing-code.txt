Unlike java, javascript is very forigiving with how you structure your files. While this great in the short term, in the long term it an result
in incredibly messy code. To avoid this, dilligent organization of your code is required. 

Common design patterns:
Plain Old javascript objects and object constructors
Factory Functions and the Module Pattern
Classes
ES6 Modules

terms we will learn about:
closure, prototypes, IIFEs.

Review:
The "Object Literal" syntax is preferred to the classical notation I learned with java
const myObject = {
  property: 'Value!',
  otherProperty: 77,
  "obnoxious property": function() {
    // do stuff!
  }}

  or wait...I did this as well?


  There are 2 ways to retrieve information out of an object.
    Dot notation.
    This is what I did with java: object.attribute

    Bracket notation:
    object["obnoxious property"]

    Dot notation is cleaner and is usually preferred, but there are occasions where you are forced to use bracket notation. For instance,
    if an attribute has a space in it, then it cannot be accessed using dot notation. 
    Likewise, you cannot use variables in dot noation.

    const variable = 'property';
    myObject.variable; // this gives us 'undefined' because it's looking for a property named 'variable' in our object
    myObject[variable]; // this is equivalent to myObject['property'] and returns 'Value!'



Main Lesson overview:
    How to write an object constructor and instantiate the object
    Describe what a prototype is and how it can be used
    Explain prototypal inheritance
    Understand the do's and don'ts of prototypal inheritance
    Explain what Object.create does
    Explain what the this keyword is


1. Objects as a design pattern.
    One of the simplest was you can begin to organize your code is by simply grouping things into objects. 
    // example one
    const playerOneName = "tim";
    const playerTwoName = "jenn";
    const playerOneMarker = "X";
    const playerTwoMarker = "O";

    // example two
    const playerOne = {
    name: "tim",
    marker: "X"
    };

    const playerTwo = {
    name: "jenn",
    marker: "O"
    };

    Creating objects is much more effecient than manually typing out every variable.
    Unfortunately, it is equally as ineffecient to type out an object every time you need one, which leads us to...

2. Object constructors:
    Allows you to create objects very easily. This is exactly the same as java no surprises here
        
        function Player(name, marker) {
        this.name = name;
        this.marker = marker;
        }

    the new keyword is used in conjuction with the constructor method.    
        const player = new Player('steve', 'X');
        console.log(player.name); // 'steve'
    
3. The prototype:
    This is new. All objects in javascript have a prototype. The prototype is another object that the original object inherits from.
    The original object has access to all the prototypes methods and properties. 

    breakdown:
    a. All objects in javascript have a prototype.
        Every object in javascript has a prototype. E.g. player1 and player2 objects created with Player(name, marker) also have a prototype
        What does that mean? What even is a prototype?

    b. Stated simply... the prototype is another object.
        A prototype is just another object! The prototype object has its own properties and functions, just like Player objects have
        properties like .name .marker .and functions like .sayName() attached to them.

    c. that the original object inherits from, and has access to all of its prototype's methods and properties.
        Here the original object refers to the player1 or player2. These objects inherit from the prototype. 
        Prototypes act similarly to java's parent classes, in that both player1 and player2 could call a function
        from a shared prototype(parent class). While they are similar in this instance, they are not exactly the same.

    Accessing an object's prototype.
        Object.getPrototypeOf(player1) === Player.prototype; // returns true
        Object.getPrototypeOf(player2) === Player.prototype; // returns true

        breakdown again:
        a. All objects in javascript have a prototype:
            You can check the object's prototype by using the Object.getPrototypeOf() function on the object, like
            Object.getPrototypeOf(player1) === Player.prototype.

        b. The prototype is just another object...
            The value of the Object Constructor's .prototype property (i.e. Player.prototype) contains the prototype object.
            The reference to this value of Player.prototype is stored in every player object, every tim e a player object is created.
            Hence, you get a true value returned when you check the objects prototype.
            -Object.getPrototypeOf(player1) === Player.prototype
        
        c. That the original object inherits from, and has access to all of its prototype's methods and properties.
            Every player object has a value which refers to player.prototype. So: Object.getPrototypeOf(player1) === Object.getPrototypeOf(player2)
            So, any properties defined on Player.prototype will be available to the created Player objects!

            Ok this is literally just parent classes.



        Defining "on the prototype"
        Player.prototype.sayHello = function() {
        console.log("Hello, I'm a player!");
            };

        player1.sayHello(); // logs "Hello, I'm a player!"
        player2.sayHello(); // logs "Hello, I'm a player!"


        Here we defined the .sayHello function "on" the Objec.getPrototypeOf() to access an objects prototype, the same thing can be done using
        the .__prototype__ property of the object. However, this is a non-standard way of doing so, and deprecated. Hence, it is not
        recommended to access an oject's prototype by using this property. However, the same code can thus be rewritten to become:
        // Don't do this!
        player1.__proto__ === Player.prototype; // returns true
        player2.__proto__ === Player.prototype; // returns true


4. Prototypal Inheritance
    What us is an object's prototype? What is the purpose of defining properties and function on the properties?
    a. We can define properties and funcitons among all obejcts on the prototype to save memory.
    Defining functions and properties on a centralized shared object which the objects have access to saves memory.

    b. We can have objects inherit from the prototype.    

    *note that an objects prototype itself inhertis from a general javascript prototype, meaning that all object prototypes have a default
    list of attributes and functions to access.

    *note: An object's Object.getPrototypeOf() value can only be ONE unique prototype object.

    When a fuction is called and is not present within the currently defined object, javascript will travel upwards
    through the superclasses until it finds the prototype that defines the function. If no such prototype exists, javascript
    will return undefined.


5. Recommended method for prototypal inheritance.

    *TBH just read the odin page, theres a lot of code and I don't know if I understand it well enoough to summmarize. I don't really understand
    how this is better than traditional class based inheritance this seems really similarly

    note* Player.prototype = Person.prototype;
    does NOT work, because it will directly refer to Personal.prototype and not an instance, which will cause cause problems if you edit something  
    in the future.




Article: Understanding Prototypes and Inheritance in Javascript.
    Javscript is a prototype based language, meaning object properties and methods can be shared through generalized objects that have the
    ability to be cloned and extended. This is known as prototypical inhertiance and differs from class inheritance. Javascript is unique
    from PHP, python, Java in using prototypes instead of classes.

    1. Javascript Prototypes:
        Every object in javascript has an internal property called [[Prototype]]
            *The double square brackets [[]] signify that it is an internal property that cannot be accessed directly in code.

        To find the [[Prototype]] of an object, us getPrototypeOf()
        let x = {}; //instantiates an empty object called x
        Object.getPrototypeOf(x); //accesses x's prototype

        The output will consist of several built-in properties and functions:
            Output
            {construcotr: f, __defineGett__: f, __defineSetter__: f, ...}
    

    2. Prototype Inheritance:
        When searching for a property or method, javascript will check the initial instance of the object,
        the its prototype, the its prototype's prototype, etc. Following the prototypal chain until a method is found.

        Any attempt to search beyond the end of the chain results in null.

        Javascript objects have a hidden internal [[Prototype]] property. OBjects can be extended and will
        inherit the properties and methods on [[Prototype]] of their constructor. These prototypes can be chained
        and each additional object will inherit everything throughout the chain.

    3. Constructor Functions:
        Constructors are functions that are use to construct new objects. The "new" operator is used to create new instances
        of an object based off the constructor function. 
        In javascript, we capitalize the first letter of a constructor function by convention

        //initialize a constructor function for a new hero
        function Hero(name, level){
            this.name = name;
            this.level = level;
        }

        let hero1 = new Hero("Bjorn", 1);
        Hero.prototype.greeet = function(){
            return "${this.name} says hello.";
        }
        hero1.greet();
        Output: "Bjorn says hello."



        The call() method can be used to copy over properties from one constructor into another constructor. 
            // Initialize Warrior constructor
            function Warrior(name, level, weapon) {
            // Chain constructor with call
            Hero.call(this, name, level);

            // Add a new property
            this.weapon = weapon;
            }

            // Initialize Healer constructor
            function Healer(name, level, spell) {
            Hero.call(this, name, level);

            this.spell = spell;
            }
                *oooohhh I see, they're using the hero constructor within the new warrior and healer constructors,
                but adding their own unique attributes as well. So they don't have to copy/paste code and hunt down
                variations if they need to edit something.

            *note: You need to manually link prototypes when using chain constructors.
            If you use the Hero constructor within the warrior constructor. The warrior is not linked to the hero prototype by default
            ...
                Object.setPrototypeOf(Warrior.prototype, Hero.prototype);
                Object.setPrototypeOf(Healer.prototype, Hero.prototype);

    
        Conclusion. Javascript is a prototype-based language, and functions differently than the traditional class-based paradigm that many other
        object-oriented languages use.



    Article: Gentle Explanation of "this" in Javascript:
        1. The mystery of this
            From a background like java, PHP, or other STANDARD language, this is the instance of the current object in the class method.
            this cannot be used outside the method and suc a simple approach does not create confusion.

            In javascript, the situation is different. this is the context of a function invocation.  The language has 4 function invocation types.
            function invocation: alert("Hello World!")
            method invocation: console.log("Hello World)
            constructor invocation: new RegExp("//d")
            indirect invocation: alert.call(undefined, "Hello World!")

            Each invocation type defines the context in its way, so "this" behaves differently than the developer expects.

            "The key to understanding the "this" keyword is having a clear view of function invocation ahdow it impacts the context."
            This article focuses on the invocation explanation, how the function invocation influences "this" and demonstrates the common
            pitfalls of identifying the value of "this"

            Before starting, lets familiarize with a couple of terms:
                Invocation: The calling of a function.
                Context of an invocation is the value of this within function body.
                Scope of a function is the set of variabels and functions accessible within a function body.


        2.Function Invocation:
            Function Invocation is performed when an expression taht evalues to a function object is followed by an open parenthesis.
            Function invocation is different from a method invocation. For isntance. obj.mlyFunc() is a method invocation, as it is acting upon an objectg.

            2.1 "this" in a function invocation:
                The global object is determined by the execution environment. In a broswer, the global object is window object.
                In a function invocation, the execution object is the global object.
            2.2 "this in a function invocation, strict mode:
                "this is undefined in a fucntion invocation in strict mode"
                strict mode is a restricted variant of Javascript. It provides better security and stronger error checking.
                To enable the strict mode, place the direct "use st rict" at the top of a function body.
            PITFALL: "this" in an inner function.
                A common trap with the funciton invocation is thinking that "this" is the same in an inner function as in the otuer function.
            
            The context of the inner function (except for arrow functions) depends only on its own invocation type, but not on the touer function's context.
            To make "this" have a desired value, modify the inner function's context with indirect invocation (using.call() or apply()) or create a bound function
            using .bind()

            arrow functions don't have a default "this" context, and use whatever the parent function has.

        3. Method Invocation:
            A method is a funciton stroed in a property of an object.
            Method Invocation is performe when an expression in a form of property accessor that evalues ot a function object is followed by a open parenthesis
            e.g. myObject.helloMethod()
            
            In Method Invocations, "this" refers to the object that owns the method in a method invocation.
            Exactly like java